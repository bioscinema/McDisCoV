// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fast_objective_c
double fast_objective_c(const Eigen::MatrixXd& Z, const Eigen::MatrixXd& X, const Eigen::MatrixXd& alpha_matrix, const List& nonzero_index, const Eigen::MatrixXd& Sigma_c);
RcppExport SEXP _McDisCoV_fast_objective_c(SEXP ZSEXP, SEXP XSEXP, SEXP alpha_matrixSEXP, SEXP nonzero_indexSEXP, SEXP Sigma_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type alpha_matrix(alpha_matrixSEXP);
    Rcpp::traits::input_parameter< const List& >::type nonzero_index(nonzero_indexSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma_c(Sigma_cSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_objective_c(Z, X, alpha_matrix, nonzero_index, Sigma_c));
    return rcpp_result_gen;
END_RCPP
}
// fast_half1_half2
List fast_half1_half2(const List& PhiiXi_list, const List& PhiiZi_list, const List& Sigma_list);
RcppExport SEXP _McDisCoV_fast_half1_half2(SEXP PhiiXi_listSEXP, SEXP PhiiZi_listSEXP, SEXP Sigma_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type PhiiXi_list(PhiiXi_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type PhiiZi_list(PhiiZi_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Sigma_list(Sigma_listSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_half1_half2(PhiiXi_list, PhiiZi_list, Sigma_list));
    return rcpp_result_gen;
END_RCPP
}
// fast_H_theta_theta
Eigen::MatrixXd fast_H_theta_theta(const List& PhiiXi_list, const List& Sigma_list);
RcppExport SEXP _McDisCoV_fast_H_theta_theta(SEXP PhiiXi_listSEXP, SEXP Sigma_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type PhiiXi_list(PhiiXi_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Sigma_list(Sigma_listSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_H_theta_theta(PhiiXi_list, Sigma_list));
    return rcpp_result_gen;
END_RCPP
}
// fast_theta_gradient
Eigen::VectorXd fast_theta_gradient(const List& PhiiXi_list, const List& PhiiZi_list, const List& Sigma_list, const Eigen::VectorXd& theta_hat);
RcppExport SEXP _McDisCoV_fast_theta_gradient(SEXP PhiiXi_listSEXP, SEXP PhiiZi_listSEXP, SEXP Sigma_listSEXP, SEXP theta_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type PhiiXi_list(PhiiXi_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type PhiiZi_list(PhiiZi_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Sigma_list(Sigma_listSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta_hat(theta_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_theta_gradient(PhiiXi_list, PhiiZi_list, Sigma_list, theta_hat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_McDisCoV_fast_objective_c", (DL_FUNC) &_McDisCoV_fast_objective_c, 5},
    {"_McDisCoV_fast_half1_half2", (DL_FUNC) &_McDisCoV_fast_half1_half2, 3},
    {"_McDisCoV_fast_H_theta_theta", (DL_FUNC) &_McDisCoV_fast_H_theta_theta, 2},
    {"_McDisCoV_fast_theta_gradient", (DL_FUNC) &_McDisCoV_fast_theta_gradient, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_McDisCoV(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
